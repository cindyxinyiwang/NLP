import nltk
from nltk.corpus import brown, gutenberg
from nltk import sent_tokenize, word_tokenize

import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
import numpy as np

from scipy.stats import poisson, nbinom

datafile = "result.txt"
data = ""
total = 0
count = {}
probs = [0, 0.0067030949887072156, 0.01144576929304871, 0.0099915643408606709, 0.01616689078350151, 0.0134145238693862, 0.015215118110372407, 0.018287698994770479, 0.020709021482328414, 0.022107396050127449, 0.023040086735894388, 0.023975567396614196, 0.025088165138843953, 0.02616074063889922, 0.026729849201287566, 0.027218259539808456, 0.027805029364306216, 0.028088489790006874, 0.028410582617960849, 0.028761815756262063, 0.028816297481172006, 0.029836512049085932, 0.028706613373615218, 0.028375399077734145, 0.027804380772343002, 0.027333641991042049, 0.026640652363679906, 0.025856103170844111, 0.024934742254212355, 0.02410147659836185, 0.023211129702193287, 0.02217637329065969, 0.021202672032107649, 0.020234308788363964, 0.019330933429823227, 0.018323392142968284, 0.017564905022432093, 0.016238184423902371, 0.015131351943567847, 0.014082578739051466, 0.012992836142192092, 0.0120022714925965, 0.010960993128543921, 0.0099930571318871137, 0.0090967648093890907, 0.0083292128440337031, 0.0075956038580864927, 0.0069237552401919551, 0.0063276837833328723, 0.0057544932096204905, 0.0052512064363877961, 0.0047910664713745974, 0.0043527315504580067, 0.0039321505476455736, 0.0035382956517617504, 0.0031804530525020728, 0.0028282985018086735, 0.0025175302954346173, 0.0022498213888405747, 0.001977716470051418, 0.0017512188908977567, 0.0015503973173989318, 0.0013594590500062189, 0.0012106277846697538, 0.0010791695183479382, 0.00094776272757875874, 0.00083420251090848038, 0.0007409082193109949, 0.00065729647916434094, 0.00058545205035027644, 0.00051809628972607116, 0.00045762795804456257, 0.00041255596415648143, 0.00036561540770771347, 0.00032975753774147626, 0.00030465291072089928, 0.00027449338443146724, 0.00024714957087122432, 0.00022776902530377048, 0.00021274845904458583, 0.00018514726772116293, 0.00017142388538840547, 0.00016306940319558275, 0.00014953133285231489, 0.00013365112486410905, 0.00012476644447913552, 0.00011474930193617003, 0.00010915905691990049, 0.00010507704559586573, 9.5425379476615836e-05, 8.90887389471243e-05, 8.606197645212753e-05, 8.5001580067825934e-05, 7.3568859827370461e-05, 7.1273050179804871e-05, 6.6557889558347319e-05, 6.2625157336956971e-05, 5.9943281044621391e-05, 6.1667712057927369e-05, 5.5763466170578235e-05]

#real_plt, = plt.plot(count.keys(), probs, linewidth=3, color='g')
real_plt, = plt.plot([i for i in range(100)], probs, linewidth=3, color='g')
plt.xlim([0, 100])
#plt.savefig("word_len.png")
m = 24.5920872954
v = 193.061761139
#m_log = np.log(m/( (1+v/(m**2))**0.5 ))
#s_log = np.log(1+v/(m**2)) ** 0.5
m_log = 2.9994145364
s_log = 0.719809876383

#plot log normal distribution
#mu, sigma = 3.25, 0.45 # mean and standard deviation
mu, sigma = m_log, s_log
print m_log, s_log, m, v
x = np.linspace(1, 100, 10000)
pdf = (np.exp(-(np.log(x) - mu)**2 / (2 * sigma**2)) / (x * sigma * np.sqrt(2 * np.pi)))
line_lognorm, = plt.plot(x, pdf, linewidth=2, color='r')

"""
#plot normal distribution
line_norm, = plt.plot(x, mlab.normpdf(x, m, np.sqrt(v)), linewidth=2, color='k')

#plot poisson distribution
mu = m
dist = poisson(mu)
x = np.arange(0, 100)
line_poission, = plt.plot(x, dist.pmf(x), ls="--", linewidth=2)
"""

#plot negative binomial distribution
"""
p = 1- m/v
n = m*(1-p)/p
print n, p
line_neg_poisson, = plt.plot(x, nbinom.pmf(x, n, p), ls=":", linewidth=2)
"""
# plot probabilites obtained by berkerly parser
b_prob = [0, 0.0035237700708999546, 0.004540253071801108, 0.005670779362664136, 0.006509449132521744, 0.010003770166938228, 0.015175545661952762, 0.02023282514383079, 0.02492212660337487, 0.02858613120202318, 0.03119180600983595, 0.032644580100564896, 0.03340794865198185, 0.03352666309239694, 0.03311452745438423, 0.03230941022989179, 0.031217276069111545, 0.029932988641918314, 0.028514453053581298, 0.027028120093320965, 0.025517080286036765, 0.024009741301823807, 0.022531131184157702, 0.021097092585539507, 0.019719557341012238, 0.018406124493552837, 0.01716127125772899, 0.015987137935393834, 0.014883736550738491, 0.013849950589958953, 0.012883677868498767, 0.011982217789347336, 0.011142482226450413, 0.010361141026452053, 0.00963478652936984, 0.008959998141594594, 0.008333425213555692, 0.007751825959759251, 0.007212095340986956, 0.006711285482842196, 0.006246612472869113, 0.0058154618524964615, 0.0054153868105329605, 0.005044104503104311, 0.004699490259410519, 0.004379570123118744, 0.004082513087198912, 0.0038066226281486567, 0.0035503283073239278, 0.003312177410313341, 0.003090826806298775, 0.0028850351653677236, 0.002693655523274581, 0.0025156282786914157, 0.0023499746066763315, 0.0021957903013826827, 0.0020522400410035147, 0.0019185520568274555, 0.001794013193884219, 0.0016779643396213032, 0.001569796200946929, 0.0014689454072910348, 0.0013748909176517015, 0.001287150710693388, 0.0012052787369661367, 0.0011288621138335854, 0.0010575185444567257, 0.0009908939433953764, 0.0009286602525418495, 0.000870513432166057, 0.0008161716129993718, 0.0007653733962987129, 0.0007178762898467142, 0.0006734552687829124, 0.0006319014510406163, 0.0005930208779929403, 0.0005566333916734926, 0.0005225716006487069, 0.0004906799272734553, 0.00046081372966572023, 0.00043283849229246494, 0.0004066290795693807, 0.000382069047346403, 0.0003590500075807051, 0.00033747104189291215, 0.000317238160063031, 0.0002982637998527279, 0.00028046636484271734, 0.0002637697972503061, 0.0002481031829448523, 0.00023340038610999414, 0.00021959971121278724, 0.00020664359013314562, 0.0001944782924836829, 0.00018305365731168644, 0.00017232284452280218, 0.00016224210450129368, 0.00015277056452552218, 0.00014387003069061963, 0.00013550480415407232, 0.00012764151061494573, 0.00012024894202453622]
line_gram, = plt.plot([ i for i in range(len(b_prob))], b_prob, linewidth=2,color='b')

plt.legend([line_lognorm,  line_gram, real_plt], [ 'lognormal', 'grammar', 'Gigaword data'])
plt.show()
